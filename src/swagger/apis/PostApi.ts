/* tslint:disable */
/* eslint-disable */
/**
 * Blog - for Svelte Course
 * Svelte Blog
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface PostControllerCreateRequest {
    body: object;
}

export interface PostControllerFindOneRequest {
    id: string;
}

export interface PostControllerRemoveRequest {
    id: string;
}

export interface PostControllerUpdateRequest {
    id: string;
    body: object;
}

/**
 * 
 */
export class PostApi extends runtime.BaseAPI {

    /**
     */
    async postControllerCreateRaw(requestParameters: PostControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async postControllerCreate(requestParameters: PostControllerCreateRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.postControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postControllerFindAllRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async postControllerFindAll(initOverrides?: RequestInit): Promise<string> {
        const response = await this.postControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postControllerFindOneRaw(requestParameters: PostControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async postControllerFindOne(requestParameters: PostControllerFindOneRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.postControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postControllerRemoveRaw(requestParameters: PostControllerRemoveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async postControllerRemove(requestParameters: PostControllerRemoveRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.postControllerRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postControllerUpdateRaw(requestParameters: PostControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postControllerUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async postControllerUpdate(requestParameters: PostControllerUpdateRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.postControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
