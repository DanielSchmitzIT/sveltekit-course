/* tslint:disable */
/* eslint-disable */
/**
 * Blog - for Svelte Course
 * Svelte Blog
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoginRequestDto,
    LoginRequestDtoFromJSON,
    LoginRequestDtoToJSON,
    LoginResponseDto,
    LoginResponseDtoFromJSON,
    LoginResponseDtoToJSON,
    RegisterRequestDto,
    RegisterRequestDtoFromJSON,
    RegisterRequestDtoToJSON,
    RegisterResponseDto,
    RegisterResponseDtoFromJSON,
    RegisterResponseDtoToJSON,
} from '../models';

export interface AuthControllerLoginRequest {
    loginRequestDto: LoginRequestDto;
}

export interface AuthControllerRegisterRequest {
    registerRequestDto: RegisterRequestDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoginResponseDto>> {
        if (requestParameters.loginRequestDto === null || requestParameters.loginRequestDto === undefined) {
            throw new runtime.RequiredError('loginRequestDto','Required parameter requestParameters.loginRequestDto was null or undefined when calling authControllerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestDtoToJSON(requestParameters.loginRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit): Promise<LoginResponseDto> {
        const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerRegisterRaw(requestParameters: AuthControllerRegisterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegisterResponseDto>> {
        if (requestParameters.registerRequestDto === null || requestParameters.registerRequestDto === undefined) {
            throw new runtime.RequiredError('registerRequestDto','Required parameter requestParameters.registerRequestDto was null or undefined when calling authControllerRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestDtoToJSON(requestParameters.registerRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerRegister(requestParameters: AuthControllerRegisterRequest, initOverrides?: RequestInit): Promise<RegisterResponseDto> {
        const response = await this.authControllerRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
