/* tslint:disable */
/* eslint-disable */
/**
 * Blog - for Svelte Course
 * Svelte Blog
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Category,
    CategoryFromJSON,
    CategoryToJSON,
    CategoryDetailDto,
    CategoryDetailDtoFromJSON,
    CategoryDetailDtoToJSON,
    CategoryDto,
    CategoryDtoFromJSON,
    CategoryDtoToJSON,
} from '../models';

export interface CategoryControllerCreateRequest {
    category: Category;
}

export interface CategoryControllerRemoveRequest {
    id: string;
}

export interface CategoryControllerUpdateRequest {
    id: string;
    body: object;
}

export interface GetCategoryByNameRequest {
    name: string;
}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     */
    async categoryControllerCreateRaw(requestParameters: CategoryControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling categoryControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters.category),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     */
    async categoryControllerCreate(requestParameters: CategoryControllerCreateRequest, initOverrides?: RequestInit): Promise<Category> {
        const response = await this.categoryControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async categoryControllerRemoveRaw(requestParameters: CategoryControllerRemoveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling categoryControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async categoryControllerRemove(requestParameters: CategoryControllerRemoveRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.categoryControllerRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async categoryControllerUpdateRaw(requestParameters: CategoryControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling categoryControllerUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling categoryControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async categoryControllerUpdate(requestParameters: CategoryControllerUpdateRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.categoryControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllCategoriesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CategoryDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryDtoFromJSON));
    }

    /**
     */
    async getAllCategories(initOverrides?: RequestInit): Promise<Array<CategoryDto>> {
        const response = await this.getAllCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCategoryByNameRaw(requestParameters: GetCategoryByNameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CategoryDetailDto>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getCategoryByName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/categories/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDetailDtoFromJSON(jsonValue));
    }

    /**
     */
    async getCategoryByName(requestParameters: GetCategoryByNameRequest, initOverrides?: RequestInit): Promise<CategoryDetailDto> {
        const response = await this.getCategoryByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
